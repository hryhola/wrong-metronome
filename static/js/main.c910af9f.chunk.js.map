{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["URL","process","worker","Worker","context","window","AudioContext","webkitAudioContext","App","sounds","useRef","useState","bpm","setBpm","playing","setPlaying","soundEffect","setSoundEffect","tilt","setTilt","visibleTilt","setVisibleTilt","useEffect","current","fetch","then","response","arrayBuffer","decodeAudioData","audioBuffer","onmessage","data","type","source","createBufferSource","buffer","connect","destination","start","play","keysPressed","document","addEventListener","event","key","className","range","min","max","theme","pips","mode","stepped","density","onSlide","e","parseInt","onChange","postMessage","value","console","log","onClick","name","checked","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c910af9f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\n\nimport { Slider, FormRadio, Button } from 'shards-react';\n\nconst isDev = process.env.NODE_ENV === \"development\";\nconst localUrl = process.env.REACT_APP_LOCAL_URL;\nconst prodUrl = process.env.REACT_APP_PROD_URL;\n\nconst URL = isDev ? localUrl : prodUrl;\n\nconst worker = new Worker(`${URL}/bpm-worker.js`);\nconst context = new (window.AudioContext || window.webkitAudioContext)();\n\nfunction App() {\n  const sounds = useRef({ 'beat.mp3': null });\n\n  const [bpm, setBpm] = useState(120);\n  const [playing, setPlaying] = useState(true);\n  const [soundEffect, setSoundEffect] = useState('high-tick.mp3');\n  const [tilt, setTilt] = useState(5);\n  const [visibleTilt, setVisibleTilt] = useState(false);\n\n  const handleTiltSet = ({ target }) => {\n    if (+target.value < 0 || +target.value > 200) return;\n    setTilt(parseInt(target.value));\n    worker.postMessage({ type: 'set_tilt', value: parseInt(target.value) });\n  };\n\n  const handleSlide = (e) => {\n    setBpm(parseInt(e[0]));\n  };\n\n  const handleChange = (e) => {\n    worker.postMessage({ type: 'set_bpm', value: parseInt(e[0]) });\n    console.log(parseInt(e[0]));\n  };\n\n  const handleToggleClick = () => {\n    setPlaying(!playing);\n    worker.postMessage({ type: 'toggle_playing' });\n  };\n\n  function play(audioBuffer) {\n    const source = context.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(context.destination);\n    source.start();\n  }\n\n  useEffect(() => {\n    if (!sounds.current[soundEffect]) {\n      fetch(`${URL}/${soundEffect}`)\n        .then((response) => response.arrayBuffer())\n        .then((arrayBuffer) => context.decodeAudioData(arrayBuffer))\n        .then((audioBuffer) => {\n          sounds.current[soundEffect] = audioBuffer;\n        });\n    }\n  }, [soundEffect]);\n\n  useEffect(() => {\n    worker.onmessage = ({ data }) => {\n      switch (data.type) {\n        case 'beep': {\n          play(sounds.current[soundEffect]);\n          break;\n        }\n        default:\n          break;\n      }\n    };\n  });\n\n  useEffect(() => {\n    let keysPressed = {};\n    document.addEventListener('keydown', (event) => {\n      keysPressed[event.key] = true;\n\n      if (keysPressed['q'] && keysPressed['e'] && keysPressed['t']) {\n        setVisibleTilt(true);\n      }\n    });\n\n    document.addEventListener('keyup', (event) => {\n      delete keysPressed[event.key];\n    });\n  });\n\n  return (\n    <div className='App'>\n      <div className='bpm-title'>\n        <h1>{bpm} bpm</h1>\n      </div>\n      <div className='bpm-slider-container'>\n        <Slider\n          className='bpm-slider'\n          start={[bpm]}\n          range={{ min: 30, max: 250 }}\n          theme='secondary'\n          pips={{ mode: 'steps', stepped: true, density: 10 }}\n          onSlide={handleSlide}\n          onChange={handleChange}\n        />\n        <div className='controls'>\n          <Button\n            className='button-toggle'\n            theme='secondary'\n            onClick={handleToggleClick}\n          >\n            Stop/Play\n          </Button>\n          <FormRadio\n            theme='secondary'\n            name='beat'\n            checked={soundEffect === 'beat.mp3'}\n            onChange={() => setSoundEffect('beat.mp3')}\n          >\n            Side stick\n          </FormRadio>\n          <FormRadio\n            theme='secondary'\n            name='beat'\n            checked={soundEffect === 'high-tick.mp3'}\n            onChange={() => setSoundEffect('high-tick.mp3')}\n          >\n            High tick\n          </FormRadio>\n          <FormRadio\n            theme='secondary'\n            name='beat'\n            checked={soundEffect === 'mafiozi.mp3'}\n            onChange={() => setSoundEffect('mafiozi.mp3')}\n          >\n            Mafiozi\n          </FormRadio>\n          <FormRadio\n            theme='secondary'\n            name='beat'\n            checked={soundEffect === 'gachi.flac'}\n            onChange={() => setSoundEffect('gachi.flac')}\n          >\n            Gachi\n          </FormRadio>\n\n          {visibleTilt && (\n            <div className='tilt'>\n              <span className='tilt-title'>Tilt % (margin of error): </span>\n              <input\n                className='tilt-input'\n                type='number'\n                value={tilt}\n                onChange={handleTiltSet}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}